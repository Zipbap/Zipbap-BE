name: Zipbap 관리자 서버 CI/CD (EC2 배포)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:
  workflow_call:

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: |
      github.repository == 'Zipbap/Zipbap-BE' &&
      github.actor != 'web-flow' &&
      github.actor != 'dependabot[bot]'

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v3

      - name: Docker Hub 로그인
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker 이미지 Build 및 Push
        run: |
          IMAGE_NAME=${{ secrets.DOCKER_USERNAME }}/zipbap-admin
          docker build -t $IMAGE_NAME:latest --build-arg SERVICE=api-admin .
          docker push $IMAGE_NAME:latest

      - name: EC2에 배포
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.ADMIN_EC2_HOST_ADMIN }}
          username: ubuntu
          key: ${{ secrets.ADMIN_EC2_SSH_KEY }}
          script: |
            # AWS 자격 증명 파일 생성
            mkdir -p ~/.aws
            echo "[default]" > ~/.aws/credentials
            echo "aws_access_key_id=${{ secrets.ADMIN_AWS_ACCESS_KEY_ID }}" >> ~/.aws/credentials
            echo "aws_secret_access_key=${{ secrets.ADMIN_AWS_SECRET_ACCESS_KEY }}" >> ~/.aws/credentials

            # awscli 설치 (없으면)
            if ! command -v aws &> /dev/null
            then
              sudo apt-get update && sudo apt-get install -y unzip curl
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip -o awscliv2.zip
              sudo ./aws/install
            fi

            # 최신 이미지 pull
            docker pull ${{ secrets.DOCKER_USERNAME }}/zipbap-admin:latest

            # Parameter Store에서 prod-admin.yml 가져오기
            aws ssm get-parameter \
              --name "/zipbap-admin/prod/application-admin.yml" \
              --with-decryption \
              --region ap-northeast-2 \
              --query "Parameter.Value" \
              --output text > /home/ubuntu/application-admin.yml

            # 네트워크 생성 (없으면)
            docker network inspect zipbap-net >/dev/null 2>&1 || docker network create zipbap-net

            # 기존 컨테이너 중단/삭제
            docker stop zipbap-admin || true
            docker rm zipbap-admin || true

            # 새 컨테이너 실행 (네트워크 지정 필수)
            docker run -d \
              --name zipbap-admin \
              --network zipbap-net \
              -p 8080:8080 \
              -e SPRING_PROFILES_ACTIVE=prod \
              -v /home/ubuntu/application-admin.yml:/app/config/application-prod.yml \
              ${{ secrets.DOCKER_USERNAME }}/zipbap-admin:latest

      - name: Discord 알림 (Success)
        if: success()
        run: |
          sudo apt-get install -y jq
          SHORT_SHA=$(echo "${GITHUB_SHA}" | cut -c1-7)
          # 커밋 메시지 안전 escape
          COMMIT_MSG=$(jq -Rs . <<< "${{ github.event.head_commit.message }}")

          curl -H "Content-Type: application/json" \
               -X POST \
               -d "{
                 \"embeds\": [{
                   \"title\": \"✅ 배포 성공 (Admin)\",
                   \"description\": \"zipbap-admin 서비스가 정상적으로 배포되었습니다! 🚀\",
                   \"color\": 3066993,
                   \"fields\": [
                     { \"name\": \"서비스\", \"value\": \"zipbap-admin\", \"inline\": true },
                     { \"name\": \"상태\", \"value\": \"성공 ✅\", \"inline\": true },
                     { \"name\": \"Commit SHA\", \"value\": \"\`${SHORT_SHA}\`\" },
                     { \"name\": \"Commit 메시지\", \"value\": ${COMMIT_MSG} },
                     { \"name\": \"배포자\", \"value\": \"@${GITHUB_ACTOR}\", \"inline\": true }
                   ],
                   \"footer\": { \"text\": \"GitHub Actions • main 브랜치\" },
                   \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\"
                 }]
               }" \
               ${{ secrets.DISCORD_WEBHOOK_URL }}

      - name: Discord 알림 (Failure)
        if: failure()
        run: |
          sudo apt-get install -y jq
          SHORT_SHA=$(echo "${GITHUB_SHA}" | cut -c1-7)
          COMMIT_MSG=$(jq -Rs . <<< "${{ github.event.head_commit.message }}")

          curl -H "Content-Type: application/json" \
               -X POST \
               -d "{
                 \"embeds\": [{
                   \"title\": \"❌ 배포 실패 (Admin)\",
                   \"description\": \"zipbap-admin 서비스 배포 중 문제가 발생했습니다.\",
                   \"color\": 15158332,
                   \"fields\": [
                     { \"name\": \"서비스\", \"value\": \"zipbap-admin\", \"inline\": true },
                     { \"name\": \"상태\", \"value\": \"실패 ❌\", \"inline\": true },
                     { \"name\": \"Commit SHA\", \"value\": \"\`${SHORT_SHA}\`\" },
                     { \"name\": \"Commit 메시지\", \"value\": ${COMMIT_MSG} },
                     { \"name\": \"배포자\", \"value\": \"@${GITHUB_ACTOR}\", \"inline\": true }
                   ],
                   \"footer\": { \"text\": \"GitHub Actions • main 브랜치\" },
                   \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\"
                 }]
               }" \
               ${{ secrets.DISCORD_WEBHOOK_URL }}
